<!-- BEGIN KEY -->
public class java.beans.PropertyDescriptor extends java.beans.FeatureDescriptor
<!-- END KEY -->
<!-- BEGIN DATA -->
 A PropertyDescriptor describes one property that a Java Bean
 exports via a pair of accessor methods.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.PropertyDescriptor(String propertyName, java.lang.Class<?> beanClass) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs a PropertyDescriptor for a property that follows
 the standard Java convention by having getFoo and setFoo
 accessor methods.  Thus if the argument name is "fred", it will
 assume that the writer method is "setFred" and the reader method
 is "getFred" (or "isFred" for a boolean property).  Note that the
 property name should start with a lower case character, which will
 be capitalized in the method names.

 @param propertyName The programmatic name of the property.
 @param beanClass The Class object for the target bean.  For
		example sun.beans.OurButton.class.
 @exception IntrospectionException if an exception occurs during
              introspection.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.PropertyDescriptor(String propertyName, java.lang.Class<?> beanClass, String readMethodName, String writeMethodName) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
 This constructor takes the name of a simple property, and method
 names for reading and writing the property.

 @param propertyName The programmatic name of the property.
 @param beanClass The Class object for the target bean.  For
		example sun.beans.OurButton.class.
 @param readMethodName The name of the method used for reading the property
		 value.  May be null if the property is write-only.
 @param writeMethodName The name of the method used for writing the property
		 value.  May be null if the property is read-only.
 @exception IntrospectionException if an exception occurs during
              introspection.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.PropertyDescriptor(String propertyName, Method readMethod, Method writeMethod) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
 This constructor takes the name of a simple property, and Method
 objects for reading and writing the property.

 @param propertyName The programmatic name of the property.
 @param readMethod The method used for reading the property value.
		May be null if the property is write-only.
 @param writeMethod The method used for writing the property value.
		May be null if the property is read-only.
 @exception IntrospectionException if an exception occurs during
              introspection.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.Class<?> java.beans.PropertyDescriptor.getPropertyType()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the Class object for the property.

 @return The Java type info for the property.  Note that
 the "Class" object may describe a built-in Java type such as "int".
 The result may be "null" if this is an indexed property that
 does not support non-indexed access.
 <p>
 This is the type that will be returned by the ReadMethod.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.reflect.Method java.beans.PropertyDescriptor.getReadMethod()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the method that should be used to read the property value.

 @return The method that should be used to read the property value.
 May return null if the property can't be read.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.PropertyDescriptor.setReadMethod(Method readMethod) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the method that should be used to read the property value.

 @param readMethod The new read method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized java.lang.reflect.Method java.beans.PropertyDescriptor.getWriteMethod()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets the method that should be used to write the property value.

 @return The method that should be used to write the property value.
 May return null if the property can't be written.

<!-- END DATA -->
<!-- BEGIN KEY -->
public synchronized void java.beans.PropertyDescriptor.setWriteMethod(Method writeMethod) throws java.beans.IntrospectionException
<!-- END KEY -->
<!-- BEGIN DATA -->
 Sets the method that should be used to write the property value.

 @param writeMethod The new write method.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.PropertyDescriptor.isBound()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Updates to "bound" properties will cause a "PropertyChange" event to
 get fired when the property is changed.

 @return True if this is a bound property.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyDescriptor.setBound(boolean bound)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Updates to "bound" properties will cause a "PropertyChange" event to
 get fired when the property is changed.

 @param bound True if this is a bound property.

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.PropertyDescriptor.isConstrained()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Attempted updates to "Constrained" properties will cause a "VetoableChange"
 event to get fired when the property is changed.

 @return True if this is a constrained property.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyDescriptor.setConstrained(boolean constrained)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Attempted updates to "Constrained" properties will cause a "VetoableChange"
 event to get fired when the property is changed.

 @param constrained True if this is a constrained property.

<!-- END DATA -->
<!-- BEGIN KEY -->
public void java.beans.PropertyDescriptor.setPropertyEditorClass(java.lang.Class<?> propertyEditorClass)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Normally PropertyEditors will be found using the PropertyEditorManager.
 However if for some reason you want to associate a particular
 PropertyEditor with a given property, then you can do it with
 this method.

 @param propertyEditorClass  The Class for the desired PropertyEditor.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.lang.Class<?> java.beans.PropertyDescriptor.getPropertyEditorClass()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Gets any explicit PropertyEditor Class that has been registered
 for this property.

 @return Any explicit PropertyEditor Class that has been registered
		for this property.  Normally this will return "null",
		indicating that no special editor has been registered,
		so the PropertyEditorManager should be used to locate
		a suitable PropertyEditor.

<!-- END DATA -->
<!-- BEGIN KEY -->
public java.beans.PropertyEditor java.beans.PropertyDescriptor.createPropertyEditor(Object bean)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Constructs an instance of a property editor using the current
 property editor class.
 <p>
 If the property editor class has a public constructor that takes an
 Object argument then it will be invoked using the bean parameter
 as the argument. Otherwise, the default constructor will be invoked.

 @param bean the source object
 @return a property editor instance or null if a property editor has
         not been defined or cannot be created
 @since 1.5

<!-- END DATA -->
<!-- BEGIN KEY -->
public boolean java.beans.PropertyDescriptor.equals(Object obj)
<!-- END KEY -->
<!-- BEGIN DATA -->
 Compares this <code>PropertyDescriptor</code> against the specified object.
 Returns true if the objects are the same. Two <code>PropertyDescriptor</code>s
 are the same if the read, write, property types, property editor and
 flags  are equivalent.

 @since 1.4

<!-- END DATA -->
<!-- BEGIN KEY -->
public int java.beans.PropertyDescriptor.hashCode()
<!-- END KEY -->
<!-- BEGIN DATA -->
 Returns a hash code value for the object. 
 See {@link java.lang.Object#hashCode} for a complete description.

 @return a hash code value for this object.
 @since 1.5

<!-- END DATA -->
